\NeedsTeXFormat{LaTeX2e}

\RequirePackage{amstext}
\RequirePackage{listings}
\PassOptionsToPackage{dvipsnames}{xcolor}
\RequirePackage{tcolorbox}

\tcbuselibrary{listings}
%\tcbuselibrary{listingsutf8}
\tcbuselibrary{skins}
%\tcbset{listing utf8=latin1}% optional; ’latin1’ is the default.

\newcommand\codesize{\scriptsize}
\def\codedisplayspace{0pt}

\ProcessOptions

% These two macros are defined for quick and trouble free placement of short
% code and keywords of any programming language within the document.
\newcommand\kk[1]{\textcolor{RoyalBlue}{\text{\textup{\textbf{\texttt{#1}}}}}}
\newcommand\cc[1]{\textcolor{Sepia}{\text{\textup{\textbf{\texttt{#1}}}}}}

\providecommand{\listingsfont}{\ttfamily}
\providecommand{\commentsfont}{\rmfamily}

\def\nameBASH{\Bash}
\def\nameADA{\Ada}
\def\nameAWKPROG{\AWK}
\def\nameCEEPL{\CPL}
\def\nameCPLUSPLUS{\CC}
\def\nameCSHARP{\CSharp}
\def\nameEMEL{\ML}
\def\nameFORTRAN{\Fortran}
\def\nameGO{\Go}
\def\nameHASKELL{\Haskell}
\def\nameJAVA{\Java}
\def\nameLISP{\Lisp}
\def\nameOCCAM{\Occam}
\def\namePASCAL{\Pascal}
\def\namePEEAGEPEE{\PHP}
\def\namePEEELONE{PL/I}
\def\namePERL{\Perl}
\def\namePROLOG{\Prolog}
\def\namePYTHON{\Python}

\tcbuselibrary{fitting}

\tcbset{codebox/.style={
  after=\relax,
  before=\relax,
  left=0pt,
  right=0pt,
  top=0pt,
  bottom=0pt,
  boxsep=0pt,
 % boxrule=0pt,
 % boxsep=2pt,
  clip title=false,
  colbacklower=blue!90,
  colback=olive!10!white,
  colbacktitle=yellow!85!orange!77!white,
  colframe=white,
  sharp corners=all,
  collower=Blue,
  coltitle=blue!50!black,
  % drop shadow=black!60,
  enhanced,
  fontlower=\footnotesize\ttfamily\slshape\bfseries,
  hbox,
%  interior style={left color=olive!9!white,right color=olive!16!white},
  listing only,
  listing remove caption=true,
  listing style=#1,
  notitle,
}}

\tcbset{output/.style={
    minipage,
    comment=#1,
    listing and comment,
}}

\newtcblisting{code}[2][]{%
  codebox=#2,
  #1
}

\newtcblisting{Code}[2][]{%
  codebox=#2,
  listing options={style=numbered,style=#2},
  minipage,
  width=\linewidth,
  #1
}

\newtcblisting{lcode}[2][]{%
  codebox=#2,
  before=\par\smallskip,
  #1
}


\newtcblisting{lCode}[3][]{%
  codebox=#2,
  title={#3},
  before=\par\smallskip,
  #1
}

\newtcblisting{session}[1][]{%
  codebox=printout,
  size=small,
  minipage,
  outer arc=12pt,
  sharp corners=downhill,
  arc=12pt,
  colback=Blue,
  #1
}

% Begin with generating a general purpose ``code style''. Use a mono-spaced font
% for everything; set tabs, escape, etc. 

\lstdefinestyle{basic}{%
  fontadjust,
  showstringspaces=true,
  extendedchars=true,       
  escapechar=¢,
  columns={fullflexible},
  keepspaces=true,
  tabsize=2,                 
  belowskip=0pt,
  aboveskip=3pt,
  xleftmargin=200pt,
  xrightmargin=0pt,
  breaklines=true,
}

\lstdefinestyle{printout}{%
  style=basic,
  frame=none,
  basicstyle=\color{White}\listingsfont\codesize\slshape,
  keywordstyle=\color{White}\listingsfont\codesize\slshape,
  commentstyle=\color{White}\listingsfont\codesize\slshape,
  stringstyle=\color{White}\listingsfont\codesize\slshape,
}

\lstdefinestyle{code}{%
  style=basic,
  basicstyle=\color{Sepia}\listingsfont\codesize\upshape,
  keywordstyle=\color{RoyalBlue}\listingsfont\codesize\textup\bfseries,
  commentstyle=\color{ForestGreen}\commentsfont\codesize\slshape,
  stringstyle=\color{OliveGreen}\listingsfont\codesize\itshape,
  language=C,
  directivestyle=\color{Magenta}\listingsfont\codesize\slshape,
  language=Java,
}


% Begin with generating a general purpose code style. Use a mono-spaced font
% for everything but comments.  Keywords are bold face, strings are in italics,
% while comments are in italics roman font. The escape character is back-quote.

\lstdefinestyle{display}{%
  style=code,
  basicstyle=\color{Sepia}\listingsfont\codesize\upshape,
  keywordstyle=\color{RoyalBlue}\listingsfont\codesize\textup\bfseries,
  commentstyle=\color{ForestGreen}\commentsfont\codesize\slshape,
  stringstyle=\color{OliveGreen}\listingsfont\codesize\itshape,
  xleftmargin=3ex,
}

\lstdefinestyle{inline}{%
  style=code,
}

% General style for numbered displayed code. Same as "display" style,
% but with minimal spacing for the numbering.
\lstdefinestyle{numbered}{%
  style=display,
  numbers=left,
  stepnumber=1,
  numbersep=2pt,
  numberblanklines=false,
  numberstyle=\tiny\bf\color{black},
}


\lstset{defaultdialect=[GNU]C++}

\lstdefinelanguage{GoOH}{% Keywords as defined in the BNF
	morekeywords=[1]{break,default,func,interface,%
		case,defer,go,map,struct,chan,else,goto,package,%
		switch,const,fallthrough,if,range,type,continue,%
	for,import,return,var,select},
	% Special identifiers, builtin functions
	morekeywords=[2]{make,new,nil,len,cap,copy,cmplx,%
		real,imag,panic,recover,print,println,iota,close,%
		closed,\ignore$_\ignore$}, % Make gvim happy.
	% Basic types
	morekeywords=[3]{%
		string,int,uint,uintptr,double,float,complex,byte,%
		int8,int16,int32,int64,int128,%
		uint8,uint16,uint32,uint64,uint128,%
	float32,float64,complex64,complex128},
	% Strings : "toto", 'toto', `toto`
	morestring=[b]{"},
	morestring=[b]{'},
	morestring=[b]{`},
	% Comments : /* comment */ and // comment
	comment=[l]{//},
	morecomment=[s]{/*}{*/},
	% Optionalss
	sensitive=true
}

\lstdefinelanguage{Macroscope}{%
  morekeywords={%
    numeric,
    identifier,
    optional,
    oneormore,
    expression,
    seperatedby,
    pattern,
    example,
    captures,
    expands,
    run,
    assert,
    foreach,
    eval,
    either, 
    or,   
    empty,
  },
  deletekeywords={
    for,
    int,
  },
  sensitive=true,
  morestring=[b]",
}

%	#1 Changes to the language definition, as in the listing package 
%	#2 Language name, as it is known to the listing package.
% #3 Name of the environment of the newly defined language.
\newcommand\newLanguage[3][]{%
	\lstdefinestyle{#3}{language={#2},style=display,#1}%
  \lstnewenvironment{#3}[1][]{\lstset{style=#3,##1}}{}%
}

%---- Concrete Common Languages (Sorted Alphabetically --------------

\newLanguage{Ada}{ADA}
\newLanguage{Algol}{ALGOL}
\newLanguage[morekeywords={else,in}]{AWK}{AWKPROG}
\newLanguage{Bash}{BASH}
\newLanguage[directivestyle={\listingsfont\bfseries\codesize\color{olive}}]{[GNU]C++}{CEEPL}
\newLanguage[directivestyle={\listingsfont\bfseries\codesize\color{olive}}]{[GNU]C++}{CPLUSPLUS}
\newLanguage[morekeywords={select,in,from,where,var,yield},deletekeywords={base}]{[Sharp]C}{CSHARP}
\newLanguage{Cobol}{COBOL}
\newLanguage[morekeywords={yield}]{Python}{PYTHON}
\newLanguage[morekeywords={create,factory,note}]{Eiffel}{EIFFEL}
\newLanguage{php}{PEEAGEPEE}
\newLanguage{HTML}{AGETEEEMEL}
\newLanguage{GoOH}{GO}
\newLanguage[alsoletter={-}]{HTML}{HTML}
\newLanguage[morekeywords={enum,strictfp,@interface,inherited},alsoletter=@,moredirectives={@Override},literate={->}{$\rightarrow$}1]{Java}{JAVA}
\newLanguage{Macroscope}{MACROSCOPE}
\newLanguage{Oberon-2}{OBERON}
\newLanguage{Pascal}{PASCAL}
\newLanguage{Prolog}{PROLOG}
\newLanguage[morekeywords={car,cdr,caar,cddr,cadr,cdar}]{Lisp}{LISP}
\newLanguage{Fortran}{FORTRAN}
\newLanguage{Perl}{PERL}
\newLanguage{ML}{EMEL}
\newLanguage{PL/I}{PEEELONE}
\newLanguage{Haskell}{HASKELL}
\newLanguage{Occam}{OCCAM}
\newLanguage[morekeywords={<python}]{HTML}{EXEMEL}
