package org.spartan.fajita.api.examples.automatonCycles.states;

public class AutoGeneratedAutomatonCyclesStates {
  @java.lang.SuppressWarnings({"all"})
  interface IStack<Tail extends IStack> {
  }

  @java.lang.SuppressWarnings({"all"})
  public static class EmptyStack implements IStack<EmptyStack> {
  }

  public static class ErrorState extends BaseState<EmptyStack, ErrorState, ErrorState, ErrorState, ErrorState, ErrorState, ErrorState, ErrorState> {
    ErrorState() {
      super(new EmptyStack(),null);
    }
  }

  @java.lang.SuppressWarnings({"serial"})
  public static class ParseError extends java.lang.RuntimeException {
    ParseError(final java.lang.String msg) {
      super(msg);
    }
  }

  @java.lang.SuppressWarnings({"rawtypes"})
  public abstract static class BaseState<Stack extends IStack<?>, a extends BaseState, b extends BaseState, d extends BaseState, A extends BaseState, B extends BaseState, C extends BaseState, D extends BaseState> implements IStack<Stack> {
    private final Stack stack;

    protected final java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces;

    BaseState(final Stack stack, final java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      this.stack = stack;
      this.reduces = reduces;
    }

    protected Stack pop() {
      return stack;
    }

    protected a a() {
      throw new ParseError("unexpected symbol on state " + getClass().getSimpleName());
    }

    protected b b() {
      throw new ParseError("unexpected symbol on state " + getClass().getSimpleName());
    }

    protected d d() {
      throw new ParseError("unexpected symbol on state " + getClass().getSimpleName());
    }

    protected A A() {
      throw new ParseError("unexpected symbol on state " + getClass().getSimpleName());
    }

    protected B B() {
      throw new ParseError("unexpected symbol on state " + getClass().getSimpleName());
    }

    protected C C() {
      throw new ParseError("unexpected symbol on state " + getClass().getSimpleName());
    }

    protected D D() {
      throw new ParseError("unexpected symbol on state " + getClass().getSimpleName());
    }

    protected Object $() {
      throw new ParseError("unexpected symbol on state " + getClass().getSimpleName());
    }
  }

  public static class Q0 extends BaseState<EmptyStack, Q3<Q0, Q7<Q2<Q0, ?>, Q8<Q1<Q0>>>>, ErrorState, ErrorState, Q2<Q0, Q8<Q1<Q0>>>, ErrorState, Q1<Q0>, Q4<Q0>> {
    public Q0() {
      super(new EmptyStack(),new java.util.ArrayList<>());
    }

    @java.lang.Override
    public Q3<Q0, Q7<Q2<Q0, ?>, Q8<Q1<Q0>>>> a() {
      return new Q3<>(this,reduces);
    }

    @java.lang.Override
    protected Q2<Q0, Q8<Q1<Q0>>> A() {
      return new Q2<>(this,reduces);
    }

    @java.lang.Override
    protected Q1<Q0> C() {
      return new Q1<>(this,reduces);
    }

    @java.lang.Override
    protected Q4<Q0> D() {
      return new Q4<>(this,reduces);
    }
  }

  public static class Q1<Stack extends BaseState<?, ?, ?, ?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, ErrorState, Q8<Q1<Stack>>, ErrorState, ErrorState, ErrorState, ErrorState> {
    Q1(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public Q8<Q1<Stack>> d() {
      return new Q8<>(this,reduces);
    }
  }

  public static class Q2<Stack extends BaseState<?, ?, ?, ?, ?, ?, ?, ?>, C_1_d extends BaseState<?, ?, ?, ?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, Q7<Q2<Stack, ?>, C_1_d>, ErrorState, ErrorState, Q6<Q2<Stack, ?>, C_1_d>, ErrorState, ErrorState> {
    Q2(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public Q7<Q2<Stack, ?>, C_1_d> b() {
      return new Q7<>(this,reduces);
    }

    @java.lang.Override
    protected Q6<Q2<Stack, ?>, C_1_d> B() {
      return new Q6<>(this,reduces);
    }
  }

  public static class Q3<Stack extends BaseState<?, ?, ?, ?, ?, ?, ?, ?>, A_1_b extends BaseState<?, ?, ?, ?, ?, ?, ?, ?>> extends BaseState<Stack, Q3<Q3<Stack, ?>, A_1_b>, A_1_b, ErrorState, Q5<Q3<Stack, ?>, A_1_b>, ErrorState, ErrorState, ErrorState> {
    private final java.lang.String rule3 = "3,<A>,%a()%";

    Q3(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public Q3<Q3<Stack, ?>, A_1_b> a() {
      return new Q3<>(this,reduces);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked"})
    public A_1_b b() {
      reduces.add(org.spartan.fajita.api.bnf.rules.DerivationRule.deserialize(rule3));
      return (A_1_b)pop().A().b();
    }

    @java.lang.Override
    protected Q5<Q3<Stack, ?>, A_1_b> A() {
      return new Q5<>(this,reduces);
    }
  }

  public static class Q4<Stack extends BaseState<?, ?, ?, ?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, ErrorState, ErrorState, ErrorState, ErrorState, ErrorState, ErrorState> {
    Q4(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public java.lang.Object $() {
      org.spartan.fajita.api.examples.ASTViewer.showASTs(org.spartan.fajita.api.Main.generateAST(reduces));
      System.out.println("finished");
      return new Object();
    }
  }

  public static class Q5<Stack extends BaseState<? extends BaseState<?, ?, ?, ?, ?, ?, ?, ?>, ?, ?, ?, ?, ?, ?, ?>, A_2_b extends BaseState<?, ?, ?, ?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, A_2_b, ErrorState, ErrorState, ErrorState, ErrorState, ErrorState> {
    private final java.lang.String rule2 = "2,<A>,%a()%,<A>";

    Q5(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked"})
    public A_2_b b() {
      reduces.add(org.spartan.fajita.api.bnf.rules.DerivationRule.deserialize(rule2));
      return (A_2_b)pop().pop().A().b();
    }
  }

  public static class Q6<Stack extends BaseState<? extends BaseState<?, ?, ?, ?, ?, ?, ?, ?>, ?, ?, ?, ?, ?, ?, ?>, C_2_d extends BaseState<?, ?, ?, ?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, ErrorState, C_2_d, ErrorState, ErrorState, ErrorState, ErrorState> {
    private final java.lang.String rule1 = "1,<C>,<A>,<B>";

    Q6(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked"})
    public C_2_d d() {
      reduces.add(org.spartan.fajita.api.bnf.rules.DerivationRule.deserialize(rule1));
      return (C_2_d)pop().pop().C().d();
    }
  }

  public static class Q7<Stack extends BaseState<?, ?, ?, ?, ?, ?, ?, ?>, B_1_d extends BaseState<?, ?, ?, ?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, ErrorState, B_1_d, ErrorState, ErrorState, ErrorState, ErrorState> {
    private final java.lang.String rule4 = "4,<B>,%b()%";

    Q7(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked"})
    public B_1_d d() {
      reduces.add(org.spartan.fajita.api.bnf.rules.DerivationRule.deserialize(rule4));
      return (B_1_d)pop().B().d();
    }
  }

  public static class Q8<Stack extends BaseState<? extends BaseState<?, ?, ?, ?, ?, ?, ?, ?>, ?, ?, ?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, ErrorState, ErrorState, ErrorState, ErrorState, ErrorState, ErrorState> {
    private final java.lang.String rule0 = "0,<D>,<C>,%d()%";

    Q8(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public java.lang.Object $() {
      reduces.add(org.spartan.fajita.api.bnf.rules.DerivationRule.deserialize(rule0));
      return pop().pop().D().$();
    }
  }
}

