package org.spartan.fajita.api.examples.automatonCycles;

import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.NT.A;
import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.NT.B;
import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.NT.C;
import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.NT.D;
import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.Term.a;
import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.Term.b;
import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.Term.d;

import org.spartan.fajita.api.bnf.BNF;
import org.spartan.fajita.api.bnf.BNFBuilder;
import org.spartan.fajita.api.bnf.symbols.NonTerminal;
import org.spartan.fajita.api.bnf.symbols.Terminal;
import org.spartan.fajita.api.examples.automatonCycles.states.AutoGeneratedStates.Q0;

public class AutomatonCycles {
  public static void expressionBuilder() {
    new Q0().a().b().d("S").$();
    new Q0().a().a().a().b().d(new Integer(3)).$();
  }

  static enum Term implements Terminal {
    a, b, d;
  }

  static enum NT implements NonTerminal {
    A, B, C, D;
  }

  public static BNF buildBNF() {
    BNF bnf = new BNFBuilder(Term.class, NT.class) //
        .start(D) //
        .derive(D).to(C).and(d,String.class) //
        /* */.or(C).and(d,Integer.class) //
        .derive(C).to(A).and(B) //
        .derive(A).to(a).and(A) //
        /* */.or(a) //
        .derive(B).to(b) //
        .go();
    return bnf;
  }
}
