package org.spartan.fajita.api.examples.automatonCycles;

import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.NT.A;
import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.NT.B;
import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.NT.C;
import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.NT.D;
import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.Term.a;
import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.Term.b;
import static org.spartan.fajita.api.examples.automatonCycles.AutomatonCycles.Term.d;

import org.spartan.fajita.api.bnf.BNF;
import org.spartan.fajita.api.bnf.BNFBuilder;
import org.spartan.fajita.api.bnf.symbols.NonTerminal;
import org.spartan.fajita.api.bnf.symbols.Terminal;
import org.spartan.fajita.api.bnf.symbols.Type;
import org.spartan.fajita.api.examples.automatonCycles.states.AutoGeneratedAutomatonCyclesStates;
import org.spartan.fajita.api.examples.automatonCycles.states.AutoGeneratedAutomatonCyclesStates.Q0;
import org.spartan.fajita.api.examples.automatonCycles.states.AutoGeneratedAutomatonCyclesStates.Q1;
import org.spartan.fajita.api.examples.automatonCycles.states.AutoGeneratedAutomatonCyclesStates.Q2;
import org.spartan.fajita.api.examples.automatonCycles.states.AutoGeneratedAutomatonCyclesStates.Q3;
import org.spartan.fajita.api.examples.automatonCycles.states.AutoGeneratedAutomatonCyclesStates.Q7;
import org.spartan.fajita.api.examples.automatonCycles.states.AutoGeneratedAutomatonCyclesStates.Q8;

public class AutomatonCycles {
  @SuppressWarnings({ "hiding", "unused" }) public static void expressionBuilder() {
    Q0 q0 = new AutoGeneratedAutomatonCyclesStates.Q0();
    Q3<Q0, Q7<Q2<Q0, ?>, Q8<Q1<Q0>>>> a = q0.a();
    Q7<Q2<Q0, ?>, Q8<Q1<Q0>>> ab = a.b();
    Q8<Q1<Q0>> abd = ab.d();
//    abd.$();
    Q3<Q3<Q3<Q0, ?>, ?>, Q7<Q2<Q0, ?>, Q8<Q1<Q0>>>> a3 = a.a().a();
    Q8<Q1<Q0>> aaabd = a3.b().d();
//    d2.$();
  }

  static enum Term implements Terminal {
    a, b, d;
    @Override public Type type() {
      return Type.VOID;
    }
  }

  static enum NT implements NonTerminal {
    A, B, C, D;
  }

  public static BNF buildBNF() {
    BNF bnf = new BNFBuilder(Term.class, NT.class) //
        .startConfig() //
        .setApiNameTo("AutomatonCycles") //
        .setStartSymbols(D) //
        .endConfig() //
        .derive(D).to(C).and(d) //
        .derive(C).to(A).and(B) //
        .derive(A).to(a).and(A)/* */.or().to(a) //
        .derive(B).to(b) //
        .finish();
    return bnf;
  }
}
