package org.spartan.fajita.api.examples.balancedParenthesis.states;

public class AutoGeneratedBalancedParenthesisStates {
  @java.lang.SuppressWarnings({"all"})
  interface IStack<Tail extends IStack> {
  }

  @java.lang.SuppressWarnings({"all"})
  public static class EmptyStack implements IStack<EmptyStack> {
  }

  public static class ErrorState extends BaseState<EmptyStack, ErrorState, ErrorState, ErrorState, ErrorState> {
    ErrorState() {
      super(new EmptyStack(),null);
    }
  }

  @java.lang.SuppressWarnings({"serial"})
  public static class ParseError extends java.lang.RuntimeException {
    ParseError(final java.lang.String msg) {
      super(msg);
    }
  }

  @java.lang.SuppressWarnings({"rawtypes"})
  public abstract static class BaseState<Stack extends IStack<?>, build extends BaseState, lp extends BaseState, rp extends BaseState, BALANCED extends BaseState> implements IStack<Stack> {
    private final Stack stack;

    protected final java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces;

    BaseState(final Stack stack, final java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      this.stack = stack;
      this.reduces = reduces;
    }

    protected Stack pop() {
      return stack;
    }

    protected build build() {
      throw new ParseError("unexpected symbol on state " + getClass().getSimpleName());
    }

    protected lp lp() {
      throw new ParseError("unexpected symbol on state " + getClass().getSimpleName());
    }

    protected rp rp() {
      throw new ParseError("unexpected symbol on state " + getClass().getSimpleName());
    }

    protected BALANCED BALANCED() {
      throw new ParseError("unexpected symbol on state " + getClass().getSimpleName());
    }

    protected Object $() {
      throw new ParseError("unexpected symbol on state " + getClass().getSimpleName());
    }
  }

  public static class Q0 extends BaseState<EmptyStack, ErrorState, Q2<Q0>, ErrorState, Q1<Q0>> {
    public Q0() {
      super(new EmptyStack(),new java.util.ArrayList<>());
    }

    @java.lang.Override
    public Q2<Q0> lp() {
      return new Q2<>(this,reduces);
    }

    @java.lang.Override
    protected Q1<Q0> BALANCED() {
      return new Q1<>(this,reduces);
    }
  }

  public static class Q1<Stack extends BaseState<?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, ErrorState, ErrorState, ErrorState> {
    Q1(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public java.lang.Object $() {
      org.spartan.fajita.api.examples.ASTViewer.showASTs(org.spartan.fajita.api.Main.generateAST(reduces));
      System.out.println("finished");
      return new Object();
    }
  }

  public static class Q2<Stack extends BaseState<?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, Q5<Q2<Stack>, Q11<Q4<Q2<Stack>>>>, Q3<Q2<Stack>>, Q4<Q2<Stack>>> {
    Q2(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public Q5<Q2<Stack>, Q11<Q4<Q2<Stack>>>> lp() {
      return new Q5<>(this,reduces);
    }

    @java.lang.Override
    public Q3<Q2<Stack>> rp() {
      return new Q3<>(this,reduces);
    }

    @java.lang.Override
    protected Q4<Q2<Stack>> BALANCED() {
      return new Q4<>(this,reduces);
    }
  }

  public static class Q3<Stack extends BaseState<? extends BaseState<?, ?, ?, ?, ?>, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, Q2<Q3<Stack>>, ErrorState, Q13<Q3<Stack>>> {
    private final java.lang.String rule3 = "3,<BALANCED>,%lp()%,%rp()%";

    Q3(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public Q2<Q3<Stack>> lp() {
      return new Q2<>(this,reduces);
    }

    @java.lang.Override
    protected Q13<Q3<Stack>> BALANCED() {
      return new Q13<>(this,reduces);
    }

    @java.lang.Override
    public java.lang.Object $() {
      reduces.add(org.spartan.fajita.api.bnf.rules.DerivationRule.deserialize(rule3));
      return pop().pop().BALANCED().$();
    }
  }

  public static class Q4<Stack extends BaseState<? extends BaseState<?, ?, ?, ?, ?>, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, ErrorState, Q11<Q4<Stack>>, ErrorState> {
    Q4(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public Q11<Q4<Stack>> rp() {
      return new Q11<>(this,reduces);
    }
  }

  public static class Q5<Stack extends BaseState<?, ?, ?, ?, ?>, BALANCED_1_rp extends BaseState<?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, Q5<Q5<Stack, ?>, Q8<Q7<Q5<Stack, ?>, ?>, BALANCED_1_rp>>, Q6<Q5<Stack, ?>, BALANCED_1_rp>, Q7<Q5<Stack, ?>, BALANCED_1_rp>> {
    Q5(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public Q5<Q5<Stack, ?>, Q8<Q7<Q5<Stack, ?>, ?>, BALANCED_1_rp>> lp() {
      return new Q5<>(this,reduces);
    }

    @java.lang.Override
    public Q6<Q5<Stack, ?>, BALANCED_1_rp> rp() {
      return new Q6<>(this,reduces);
    }

    @java.lang.Override
    protected Q7<Q5<Stack, ?>, BALANCED_1_rp> BALANCED() {
      return new Q7<>(this,reduces);
    }
  }

  public static class Q6<Stack extends BaseState<? extends BaseState<?, ?, ?, ?, ?>, ?, ?, ?, ?>, BALANCED_2_rp extends BaseState<?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, Q5<Q6<Stack, ?>, BALANCED_2_rp>, BALANCED_2_rp, Q10<Q6<Stack, ?>, BALANCED_2_rp>> {
    private final java.lang.String rule3 = "3,<BALANCED>,%lp()%,%rp()%";

    Q6(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public Q5<Q6<Stack, ?>, BALANCED_2_rp> lp() {
      return new Q5<>(this,reduces);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked"})
    public BALANCED_2_rp rp() {
      reduces.add(org.spartan.fajita.api.bnf.rules.DerivationRule.deserialize(rule3));
      return (BALANCED_2_rp)pop().pop().BALANCED().rp();
    }

    @java.lang.Override
    protected Q10<Q6<Stack, ?>, BALANCED_2_rp> BALANCED() {
      return new Q10<>(this,reduces);
    }
  }

  public static class Q7<Stack extends BaseState<? extends BaseState<?, ?, ?, ?, ?>, ?, ?, ?, ?>, BALANCED_2_rp extends BaseState<?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, ErrorState, Q8<Q7<Stack, ?>, BALANCED_2_rp>, ErrorState> {
    Q7(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public Q8<Q7<Stack, ?>, BALANCED_2_rp> rp() {
      return new Q8<>(this,reduces);
    }
  }

  public static class Q8<Stack extends BaseState<? extends BaseState<? extends BaseState<?, ?, ?, ?, ?>, ?, ?, ?, ?>, ?, ?, ?, ?>, BALANCED_3_rp extends BaseState<?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, Q5<Q8<Stack, ?>, BALANCED_3_rp>, BALANCED_3_rp, Q9<Q8<Stack, ?>, BALANCED_3_rp>> {
    private final java.lang.String rule0 = "0,<BALANCED>,%lp()%,<BALANCED>,%rp()%";

    Q8(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public Q5<Q8<Stack, ?>, BALANCED_3_rp> lp() {
      return new Q5<>(this,reduces);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked"})
    public BALANCED_3_rp rp() {
      reduces.add(org.spartan.fajita.api.bnf.rules.DerivationRule.deserialize(rule0));
      return (BALANCED_3_rp)pop().pop().pop().BALANCED().rp();
    }

    @java.lang.Override
    protected Q9<Q8<Stack, ?>, BALANCED_3_rp> BALANCED() {
      return new Q9<>(this,reduces);
    }
  }

  public static class Q9<Stack extends BaseState<? extends BaseState<? extends BaseState<? extends BaseState<?, ?, ?, ?, ?>, ?, ?, ?, ?>, ?, ?, ?, ?>, ?, ?, ?, ?>, BALANCED_4_rp extends BaseState<?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, ErrorState, BALANCED_4_rp, ErrorState> {
    private final java.lang.String rule1 = "1,<BALANCED>,%lp()%,<BALANCED>,%rp()%,<BALANCED>";

    Q9(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked"})
    public BALANCED_4_rp rp() {
      reduces.add(org.spartan.fajita.api.bnf.rules.DerivationRule.deserialize(rule1));
      return (BALANCED_4_rp)pop().pop().pop().pop().BALANCED().rp();
    }
  }

  public static class Q10<Stack extends BaseState<? extends BaseState<? extends BaseState<?, ?, ?, ?, ?>, ?, ?, ?, ?>, ?, ?, ?, ?>, BALANCED_3_rp extends BaseState<?, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, ErrorState, BALANCED_3_rp, ErrorState> {
    private final java.lang.String rule2 = "2,<BALANCED>,%lp()%,%rp()%,<BALANCED>";

    Q10(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked"})
    public BALANCED_3_rp rp() {
      reduces.add(org.spartan.fajita.api.bnf.rules.DerivationRule.deserialize(rule2));
      return (BALANCED_3_rp)pop().pop().pop().BALANCED().rp();
    }
  }

  public static class Q11<Stack extends BaseState<? extends BaseState<? extends BaseState<?, ?, ?, ?, ?>, ?, ?, ?, ?>, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, Q2<Q11<Stack>>, ErrorState, Q12<Q11<Stack>>> {
    private final java.lang.String rule0 = "0,<BALANCED>,%lp()%,<BALANCED>,%rp()%";

    Q11(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public Q2<Q11<Stack>> lp() {
      return new Q2<>(this,reduces);
    }

    @java.lang.Override
    protected Q12<Q11<Stack>> BALANCED() {
      return new Q12<>(this,reduces);
    }

    @java.lang.Override
    public java.lang.Object $() {
      reduces.add(org.spartan.fajita.api.bnf.rules.DerivationRule.deserialize(rule0));
      return pop().pop().pop().BALANCED().$();
    }
  }

  public static class Q12<Stack extends BaseState<? extends BaseState<? extends BaseState<? extends BaseState<?, ?, ?, ?, ?>, ?, ?, ?, ?>, ?, ?, ?, ?>, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, ErrorState, ErrorState, ErrorState> {
    private final java.lang.String rule1 = "1,<BALANCED>,%lp()%,<BALANCED>,%rp()%,<BALANCED>";

    Q12(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public java.lang.Object $() {
      reduces.add(org.spartan.fajita.api.bnf.rules.DerivationRule.deserialize(rule1));
      return pop().pop().pop().pop().BALANCED().$();
    }
  }

  public static class Q13<Stack extends BaseState<? extends BaseState<? extends BaseState<?, ?, ?, ?, ?>, ?, ?, ?, ?>, ?, ?, ?, ?>> extends BaseState<Stack, ErrorState, ErrorState, ErrorState, ErrorState> {
    private final java.lang.String rule2 = "2,<BALANCED>,%lp()%,%rp()%,<BALANCED>";

    Q13(Stack stack, java.util.List<org.spartan.fajita.api.bnf.rules.DerivationRule> reduces) {
      super(stack,reduces);
    }

    @java.lang.Override
    public java.lang.Object $() {
      reduces.add(org.spartan.fajita.api.bnf.rules.DerivationRule.deserialize(rule2));
      return pop().pop().pop().BALANCED().$();
    }
  }
}

