package il.ac.technion.cs.fling.adapters;
import static java.util.stream.Collectors.joining;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.stream.Stream;
import il.ac.technion.cs.fling.internal.compiler.Namer;
import il.ac.technion.cs.fling.internal.compiler.api.dom.Method;
import il.ac.technion.cs.fling.internal.compiler.api.dom.MethodParameter;
import il.ac.technion.cs.fling.internal.compiler.api.dom.MethodSignature;
import il.ac.technion.cs.fling.internal.compiler.api.dom.Model;
import il.ac.technion.cs.fling.internal.compiler.api.dom.SkeletonType;
import il.ac.technion.cs.fling.internal.compiler.api.dom.Type;
import il.ac.technion.cs.fling.internal.compiler.api.dom.TypeName;
import il.ac.technion.cs.fling.internal.compiler.api.dom.TypeSignature;
import il.ac.technion.cs.fling.internal.grammar.rules.Named;
import il.ac.technion.cs.fling.internal.grammar.rules.Word;
/** Abstract base of all code generators.
 * 
 * @author Yossi Gil
 *
 * @since 2020-06-15 */
public abstract class APIGenerator {
  private String bottomName = "BOTTOM";
  private String topName = "TOP";
  private final Namer namer;
  private String endName = "$";
  APIGenerator(final Namer namer) {
    this.namer = namer;
  }
  public final String go(Model m) {
    namer.name(m);
    return startComment() + "\n\n" + render(m);
  }
  public abstract String render(MethodSignature s, SkeletonType t);
  public final String render(final SkeletonType t) {
    return t.render(this);
  }
  public abstract String render(TypeName name);
  public abstract String render(TypeName name, List<SkeletonType> typeArguments);
  public abstract String render(TypeSignature s, List<Method> methods);
  public abstract String renderTypeBottom();
  public abstract String renderTypeTop();
  public abstract String renderMethod(MethodSignature s, SkeletonType t);
  public abstract String renderTerminationMethod();
  abstract String comment(String text);
  final String render(final Method m) {
    return m.render(this);
  }
  abstract String render(Model m);
  abstract String render(Named q, Word<Named> Î±, Set<Named> legalJumps);
  final String render(final Type t) {
    return t.render(this);
  }
  abstract String render(TypeSignature s);
  private String startComment() {
    return comment(initialComment());
  }
  private static String initialComment() {
    return String.format("This file was automatically generated by Fling (c) on %s ", new Date());
  }
  @SuppressWarnings("static-method") String render(Stream<MethodParameter> ps) {
    return ps.map(p -> p.type + " " + p.name).collect(joining(", "));
  }
  String endName() {
    return endName;
  }
  void bottomName(@SuppressWarnings("hiding") String bottomName) {
    this.bottomName = bottomName;
  }
  void topName(@SuppressWarnings("hiding") String topName) {
    this.topName = topName;
  }
  public String bottomName() {
    return bottomName;
  }
  public String topName() {
    return topName;
  }
}