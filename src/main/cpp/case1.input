# 1 "case0.input"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "case0.input"
#define B jump_begin 
#define C C 
#define P jump_procedure 
#define O jump_open 
#define S jump_semi 
#define BP B, P 
#define BO BO 
#define PB PB 
#define BPO BP, O 
#define PBO PBO 
#define CPBO C, PBO
#define SPBO S, PBO
#define SCPBO S, CPBO
#define E E 
#define EE E, E 
#define EEE EE, E 

#define PD(n,args) Procedure_Definition##n<>rgs
#define PD1 PD(1,EEPD6)
#define PD2 PD(2,PBO) 
#define PD4 PD(4,PBO) 
#define PD6 PD(6, PBO)
#define EEPD6  EE, PD6
#define B1EEE  Body1<EEE> 
#define B1EEE_E  B1EEE, E 
#
#define PD1r  Procedure_Definition1_rec<B1EEE_E>
#define C1 Constants1<PD1r, B1EEE_E> 
package automaton;

public class T {
  public interface E {}

  public static abstract class Program_Definition0 extends S {
    @Override public abstract Program_Definition1 program_t();
  }

  public static abstract class Program_Definition1 extends S {
    @Override public abstract Program_Definition2 id_t();
  }

  public static abstract class Program_Definition2 extends S {
    @Override public abstract Parameters1<Program_Definition4> pair_t();
    @Override public abstract Program_Definition4 semi_t();
  }

  public static abstract class Program_Definition4 extends S {
    @Override public abstract Labels1<C1, PD1r, B1EEE_E> label_t();
    @Override public abstract C1 const_t();
    @Override public abstract PD1r procedure_t();
    @Override public abstract B1EEE begin_t();
  }

  public static abstract class Body1<BPO> extends S {
    @Override public abstract Body2<BPO> end_t();
  }

  public static abstract class Body2<BPO> extends S {
    @Override public abstract B begin_t();
    @Override public abstract P procedure_t();
    @Override public abstract O open_t();
  }

  public static abstract class Constant1<SPBO> extends S {
    @Override public abstract S semi_t();
    @Override public abstract B begin_t();
    @Override public abstract P procedure_t();
    @Override public abstract O open_t();
  }

  public static abstract class Constants1<PBO> extends S {
    @Override public abstract Constant1<Optional_Constants1<PBO>, PBO> semi_t();
  }

  public static abstract class Label_Declaration1<SCPBO> extends S {
    @Override public abstract B begin_t();
    @Override public abstract P procedure_t();
    @Override public abstract O open_t();
    @Override public abstract C const_t();
    @Override public abstract S semi_t();
  }

  public static abstract class Label_Declaration1_rec<CPBO> extends
      Label_Declaration1<Label_Declaration1_rec<CPBO>, CPBO> {
  }

  public static abstract class Labels1<CPBO> extends S {
    @Override public abstract Label_Declaration1_rec<CPBO> semi_t();
  }

  public static abstract class Optional_Constants1<PBO> extends S {
    @Override public abstract B begin_t();
    @Override public abstract P procedure_t();
    @Override public abstract O open_t();
    @Override public abstract Constant1<Optional_Constants1<PBO>, PBO> semi_t();
  }

  public static abstract class Optional_Labels1<CPBO> extends S {
    @Override public abstract B begin_t();
    @Override public abstract P procedure_t();
    @Override public abstract O open_t();
    @Override public abstract C const_t();
    @Override public abstract Label_Declaration1_rec<CPBO> semi_t();
  }

  public static abstract class Parameters1<jump_semi_t> extends S {
    @Override public abstract jump_semi_t semi_t();
  }

  public static abstract class Procedure_Definition1<PBO> extends S {
    @Override public abstract PD2 id_t();
  }

  public static abstract class Procedure_Definition1_rec<BO> extends S {
      extends Procedure_Definition1<Procedure_Definition1_rec<BO>, BO> {
  }

  public static abstract class PD2 extends S {
    @Override public abstract PD4 semi_t();
    @Override public abstract Parameters1<PD4> pair_t();
  }

  public static abstract class Procedure_Definition3<PBO> extends S {
    @Override public abstract PD4 semi_t();
  }

  public static abstract class PD4 extends S {
    @Override public abstract PD6 open_t();
    @Override public abstract Procedure_Definition1<EEPD6> procedure_t();
    @Override public abstract Constants1<Procedure_Definition1<EEPD6>, E, PD6> const_t();
    @Override public abstract Labels1<Constants1<Procedure_Definition1<EEPD6>, E, PD6>, Procedure_Definition1<EEPD6>, E, PD6> label_t();
  }

  public static abstract class Procedure_Definition5<PBO> extends S {
    @Override public abstract PD6 open_t();
  }

  public static abstract class PD6 extends S {
    @Override public abstract Body1<BPO> begin_t();
  }
}
