package automaton;
#define ERROR2 ERROR, ERROR
#define ERROR3 ERROR, ERROR2 
#define B1 Body1<ERROR3>
#define PD1r Procedure_Definition1_rec<B1, ERROR> 
#define PD1B1E PD1r, B1, ERROR
#define C1 Constants1<PD1B1E> 
#define OC1 Optional_Constants1<PBO>

#define BPO jump_begin, jump_procedure, jump_open 
#define BE jump_begin, jump_open
#define PBO jump_procedure, jump_begin, jump_open 
#define SPBO jump_semi, PBO
#define CPBO jump_const, PBO
#define SCPBO jump_semi, jump_const, PBO
#define PD1 Procedure_Definition1<ERROR2, PBO> 
#define PD4 Procedure_Definition4<PBO> 
#define PD6 Procedure_Definition6<PBO>
#define PD1E6 PD1, ERROR, PD6


public class T {
  private interface ERROR {}

  public static abstract class Program_Definition0 extends S {
    @Override public abstract Program_Definition1 program_t();
  }

  public static abstract class Program_Definition1 extends S {
    @Override public abstract Program_Definition2 id_t();
  }

  public static abstract class Program_Definition2 extends S {
    @Override public abstract Parameters1<Program_Definition4> pair_t();
    @Override public abstract Program_Definition4 semi_t();
  }
  

  public static abstract class Program_Definition4 extends S {
    @Override public abstract Labels1<C1, PD1B1E> label_t();
    @Override public abstract C1 const_t();
    @Override public abstract PD1r procedure_t();
    @Override public abstract B1 begin_t();
  }
  public static abstract class Body1<BPO> extends S {
    @Override public abstract Body2<BPO> end_t();
  }


  public static abstract class Body2<BPO> extends S {
    @Override public abstract jump_begin begin_t();
    @Override public abstract jump_procedure procedure_t();
    @Override public abstract jump_open open_t();
  }


  public static abstract class Constant1<SPBO> extends S {
    @Override public abstract jump_semi semi_t();
    @Override public abstract jump_begin begin_t();
    @Override public abstract jump_procedure procedure_t();
    @Override public abstract jump_open open_t();
  }

  public static abstract class Constants1<PBO> extends S {
    @Override public abstract Constant1<OC1, PBO> semi_t();
  }

  public static abstract class Label_Declaration1<SCPBO> extends S {
    @Override public abstract jump_begin begin_t();
    @Override public abstract jump_procedure procedure_t();
    @Override public abstract jump_open open_t();
    @Override public abstract jump_const const_t();
    @Override public abstract jump_semi semi_t();
  }

  public static abstract class Label_Declaration1_rec<CPBO> extends
      Label_Declaration1<Label_Declaration1_rec<CPBO>, CPBO> {
  }

  public static abstract class Labels1<CPBO> extends S {
    @Override public abstract Label_Declaration1_rec<CPBO> semi_t();
  }
  public static abstract class OC1 extends S {
    @Override public abstract jump_begin begin_t();
    @Override public abstract jump_procedure procedure_t();
    @Override public abstract jump_open open_t();
    @Override public abstract Constant1<OC1, PBO> semi_t();
  }

  public static abstract class Optional_Labels1<CPBO> extends S {
    @Override public abstract jump_begin begin_t();
    @Override public abstract jump_procedure procedure_t();
    @Override public abstract jump_open open_t();
    @Override public abstract jump_const const_t();
    @Override public abstract Label_Declaration1_rec<CPBO> semi_t();
  }

  public static abstract class Parameters1<jump_semi_t> extends S {
    @Override public abstract jump_semi_t semi_t();
  }

  public static abstract class Procedure_Definition1<PBO> extends S {
    @Override public abstract Procedure_Definition2<PBO> id_t();
  }

  public static abstract class Procedure_Definition1_rec<BO>
      extends Procedure_Definition1<Procedure_Definition1_rec<BO>, BO> {
  }

  public static abstract class Procedure_Definition2<PBO> extends S {
    @Override public abstract PD4 semi_t();
    @Override public abstract Parameters1<PD4> pair_t();
  }

  public static abstract class Procedure_Definition3<PBO> extends S {
    @Override public abstract PD4 semi_t();
  }

  public static abstract class PD4 extends S {
    @Override public abstract D6 open_t();
    @Override public abstract PD1 procedure_t();
    @Override public abstract const_t();
    @Override public abstract Labels1<Constants1<PD1E6>, PD1E6> label_t();
  }

  public static abstract class Procedure_Definition5<PBO> extends S {
    @Override public abstract D6 open_t();
  }

  public static abstract class D6 extends S {
    @Override public abstract Body1<BPO> begin_t();
  }
}
