package roth.ori.fling.junk;@java.lang.SuppressWarnings("all") public class RE{public static π_Tail_$ exactly(java.lang.String arg1){Λ Λ = new Λ();Λ.recordTerminal(roth.ori.fling.examples.Regex.Term.exactly,arg1);return Λ;}public static π_Tail_$ option(roth.ori.fling.export.ASTNode arg1){Λ Λ = new Λ();Λ.recordTerminal(roth.ori.fling.examples.Regex.Term.option,arg1);return Λ;}public static π_Tail_$ noneOrMore(roth.ori.fling.export.ASTNode arg1){Λ Λ = new Λ();Λ.recordTerminal(roth.ori.fling.examples.Regex.Term.noneOrMore,arg1);return Λ;}public static π_Tail_$ oneOrMore(roth.ori.fling.export.ASTNode arg1){Λ Λ = new Λ();Λ.recordTerminal(roth.ori.fling.examples.Regex.Term.oneOrMore,arg1);return Λ;}public static π_Tail_$ either(roth.ori.fling.export.ASTNode arg1,roth.ori.fling.export.ASTNode arg2){Λ Λ = new Λ();Λ.recordTerminal(roth.ori.fling.examples.Regex.Term.either,arg1,arg2);return Λ;}public static π_Tail_$ anyChar(){Λ Λ = new Λ();Λ.recordTerminal(roth.ori.fling.examples.Regex.Term.anyChar);return Λ;}public static π_Tail_$ anyDigit(){Λ Λ = new Λ();Λ.recordTerminal(roth.ori.fling.examples.Regex.Term.anyDigit);return Λ;}public interface π_RE_$ extends roth.ori.fling.export.ASTNode{public π_Tail_$ exactly(java.lang.String arg1);public π_Tail_$ option(roth.ori.fling.export.ASTNode arg1);public π_Tail_$ noneOrMore(roth.ori.fling.export.ASTNode arg1);public π_Tail_$ oneOrMore(roth.ori.fling.export.ASTNode arg1);public π_Tail_$ either(roth.ori.fling.export.ASTNode arg1,roth.ori.fling.export.ASTNode arg2);public π_Tail_$ anyChar();public π_Tail_$ anyDigit();}public interface π_Tail_$ extends roth.ori.fling.export.ASTNode{public π_RE_$ and();public π_RE_$ or();}private static class Λ extends roth.ori.fling.export.FluentAPIRecorder implements π_Tail_$,π_RE_$,roth.ori.fling.export.ASTNode{public Λ exactly(java.lang.String arg1){recordTerminal(roth.ori.fling.examples.Regex.Term.exactly,arg1);return this;}public Λ option(roth.ori.fling.export.ASTNode arg1){recordTerminal(roth.ori.fling.examples.Regex.Term.option,arg1);return this;}public Λ noneOrMore(roth.ori.fling.export.ASTNode arg1){recordTerminal(roth.ori.fling.examples.Regex.Term.noneOrMore,arg1);return this;}public Λ oneOrMore(roth.ori.fling.export.ASTNode arg1){recordTerminal(roth.ori.fling.examples.Regex.Term.oneOrMore,arg1);return this;}public Λ either(roth.ori.fling.export.ASTNode arg1,roth.ori.fling.export.ASTNode arg2){recordTerminal(roth.ori.fling.examples.Regex.Term.either,arg1,arg2);return this;}public Λ anyChar(){recordTerminal(roth.ori.fling.examples.Regex.Term.anyChar);return this;}public Λ anyDigit(){recordTerminal(roth.ori.fling.examples.Regex.Term.anyDigit);return this;}public Λ and(){recordTerminal(roth.ori.fling.examples.Regex.Term.and);return this;}public Λ or(){recordTerminal(roth.ori.fling.examples.Regex.Term.or);return this;}Λ(){super(new roth.ori.fling.examples.Regex().bnf().ebnf().makeSubBNF(roth.ori.fling.examples.Regex.NT.RE),"roth.ori.fling.junk");}}}