/* This file was automatically generated by Fling (c) on Mon Feb 24 19:22:06 IST 2020 */

package il.ac.technion.cs.fling.examples.generated;

@SuppressWarnings("all")
public interface BNFAPI {
  public static q0ø__Rule1$start_q0$q0ø<q0$_$_q0$<$>, $> bnf() {
    α α = new α();
    α.w.add(
        new il.ac.technion.cs.fling.internal.compiler.Assignment(
            il.ac.technion.cs.fling.examples.languages.BNF.Σ.bnf));
    return α;
  }

  interface $ {
    il.ac.technion.cs.fling.examples.generated.BNFAPIAST.PlainBNF $();
  }

  interface q0$_$_q0$<q0$> extends $ {}

  interface q0ø__Rule1$start_q0$q0ø<q0$, q0ø> {
    q0$__Rule1$_q0$q0ø<q0$, q0ø> start(il.ac.technion.cs.fling.Variable variable);
  }

  interface q0$__Rule1$_q0$q0ø<q0$, q0ø> extends $ {
    q0ø__Rule1$RuleBody$_q0$q0ø<q0$, q0ø> derive(il.ac.technion.cs.fling.Variable variable);

    q0ø__Rule1$into_q0$q0ø<q0$, q0ø> specialize(il.ac.technion.cs.fling.Variable variable);
  }

  interface q0ø__Rule1$RuleBody$_q0$q0ø<q0$, q0ø> {
    q0$__RuleTail1$_derivespecializeq0$q0ø<
            q0ø__Rule1$RuleBody$_q0$q0ø<q0$, q0ø>,
            q0ø__Rule1$into_q0$q0ø<q0$, q0ø>,
            q0$__Rule1$_q0$q0ø<q0$, q0ø>,
            q0$__Rule1$_q0$q0ø<q0$, q0ø>>
        to(il.ac.technion.cs.fling.Symbol... symbols);

    q0$__Rule1$_q0$q0ø<q0$, q0ø> toEpsilon();
  }

  interface q0ø__Rule1$into_q0$q0ø<q0$, q0ø> {
    q0$__Rule1$_q0$q0ø<q0$, q0ø> into(il.ac.technion.cs.fling.Variable... variables);
  }

  interface q0$__RuleTail1$_derivespecializeq0$q0ø<derive, specialize, q0$, q0ø> extends $ {
    derive derive(il.ac.technion.cs.fling.Variable variable);

    specialize specialize(il.ac.technion.cs.fling.Variable variable);

    q0$__RuleTail1$_derivespecializeq0$q0ø<derive, specialize, q0$, q0ø> or(
        il.ac.technion.cs.fling.Symbol... symbols);

    q0$__RuleTail1$_derivespecializeq0$q0ø<derive, specialize, q0$, q0ø> orNone();
  }

  static class α
      implements $,
          q0$_$_q0$,
          q0ø__Rule1$start_q0$q0ø,
          q0$__Rule1$_q0$q0ø,
          q0ø__Rule1$RuleBody$_q0$q0ø,
          q0ø__Rule1$into_q0$q0ø,
          q0$__RuleTail1$_derivespecializeq0$q0ø {
    public java.util.List<il.ac.technion.cs.fling.internal.compiler.Assignment> w =
        new java.util.LinkedList();

    public α bnf() {
      this.w.add(
          new il.ac.technion.cs.fling.internal.compiler.Assignment(
              il.ac.technion.cs.fling.examples.languages.BNF.Σ.bnf, new Object[] {}));
      return this;
    }

    public α start(il.ac.technion.cs.fling.Variable variable) {
      this.w.add(
          new il.ac.technion.cs.fling.internal.compiler.Assignment(
              il.ac.technion.cs.fling.examples.languages.BNF.Σ.start, new Object[] {variable}));
      return this;
    }

    public α derive(il.ac.technion.cs.fling.Variable variable) {
      this.w.add(
          new il.ac.technion.cs.fling.internal.compiler.Assignment(
              il.ac.technion.cs.fling.examples.languages.BNF.Σ.derive, new Object[] {variable}));
      return this;
    }

    public α specialize(il.ac.technion.cs.fling.Variable variable) {
      this.w.add(
          new il.ac.technion.cs.fling.internal.compiler.Assignment(
              il.ac.technion.cs.fling.examples.languages.BNF.Σ.specialize,
              new Object[] {variable}));
      return this;
    }

    public α into(il.ac.technion.cs.fling.Variable... variables) {
      this.w.add(
          new il.ac.technion.cs.fling.internal.compiler.Assignment(
              il.ac.technion.cs.fling.examples.languages.BNF.Σ.into, new Object[] {variables}));
      return this;
    }

    public α to(il.ac.technion.cs.fling.Symbol... symbols) {
      this.w.add(
          new il.ac.technion.cs.fling.internal.compiler.Assignment(
              il.ac.technion.cs.fling.examples.languages.BNF.Σ.to, new Object[] {symbols}));
      return this;
    }

    public α toEpsilon() {
      this.w.add(
          new il.ac.technion.cs.fling.internal.compiler.Assignment(
              il.ac.technion.cs.fling.examples.languages.BNF.Σ.toEpsilon, new Object[] {}));
      return this;
    }

    public α or(il.ac.technion.cs.fling.Symbol... symbols) {
      this.w.add(
          new il.ac.technion.cs.fling.internal.compiler.Assignment(
              il.ac.technion.cs.fling.examples.languages.BNF.Σ.or, new Object[] {symbols}));
      return this;
    }

    public α orNone() {
      this.w.add(
          new il.ac.technion.cs.fling.internal.compiler.Assignment(
              il.ac.technion.cs.fling.examples.languages.BNF.Σ.orNone, new Object[] {}));
      return this;
    }

    public il.ac.technion.cs.fling.examples.generated.BNFAPIAST.PlainBNF $() {
      return il.ac.technion.cs.fling.examples.generated.BNFAPICompiler.parse_PlainBNF(w);
    }
  }
}

